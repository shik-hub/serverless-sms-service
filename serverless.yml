service: sms

plugins: 
  - serverless-iam-roles-per-function
  - serverless-aws-resource-names
  # - serverless-domain-manager
  - serverless-add-api-key
  - serverless-prune-plugin
  
custom:
  stage: ${opt:stage, 'stg'}
  region: ${opt:region, 'ap-southeast-2'}
  prune:
    automatic: ${self:custom.prune_by_stage.${self:custom.stage}.automatic, self:custom.prune_by_stage.other.automatic}
    number: ${self:custom.prune_by_stage.${self:custom.stage}.number, self:custom.prune_by_stage.other.number}
  names:
    notificationSNSTopic: ${self:custom.stage}-${self:custom.region}-sns-4-${self:service}--notification-topic
    notificationSNSTopicDLQ: ${self:custom.stage}-${self:custom.region}-sqs-4-${self:service}--notification-sns-topic-dlq
    SMSQueue: ${self:custom.stage}-${self:custom.region}-sqs-4-${self:service}--sms-queue
    SMSDLQ: ${self:custom.stage}-${self:custom.region}-sqs-4-${self:service}--sms-dlq
    snsSqsSharedKeyAlias: alias/${self:custom.stage}-${self:custom.region}-kms-4-${self:service}--sns-sqs-shared
    notificationTopicArn:  'arn:aws:sns:${self:custom.region}:${aws:accountId}:${self:custom.names.notificationSNSTopic}'
    auroraDBName:  ${self:custom.stage}-${self:custom.region}-hubhello-postgres
    auroraDBArn:  'arn:aws:rds:${self:custom.region}:${aws:accountId}:${self:custom.names.auroraDBName}'
  secrets:
    auroraDBSecret: ${ssm:/aws/reference/secretsmanager/prd-${self:custom.region}-secret-4-${self:service}--hubhello-postgres-creds}
    smsApiKeySecretName: ${ssm:/aws/reference/secretsmanager/${self:custom.stage}-${self:custom.region}-secret-4-${self:service}-service--api-key}
  settings:
    stg:
      kmsPolicy: 'KMSAdmin'
      securityGroupIds:
        - sg-0934035b5bcc5d16e
      subnetIds:
        - subnet-ba33fedf
    prd:
      kmsPolicy: 'KMSAdmin'
      securityGroupIds:
        - sg-0934035b5bcc5d16e
      subnetIds:
        - subnet-ba33fedf
  prune_by_stage:
    stg:
      automatic: true
      number: 10
    prd:
      automatic: true
      number: 3
    other:
      automatic: false
      number: 0
  serverless-aws-resource-names:
    source: mapping.json
  deploymentBucketName: ${self:custom.stage}-${self:custom.region}-s3-4-serverless-deployment
  domains:
    stg: api.${self:custom.region}.hubhello.com
    prd: api.${self:custom.region}.hubhello.com
  customDomainBaseMapping:
    prd:
      prd: 'sms'
    stg:
      stg: 'sms'
    other: 'sms'
  serverless-iam-roles-per-function:
    defaultInherit: true
  apiKeys:
    - name: ${self:custom.stage}-api-key-4-${self:service}-service
      deleteAtRemoval: false
      value: ${self:custom.secrets.smsApiKeySecretName}
      usagePlan:
        name: ${self:custom.stage}-usage-plan-4-${self:service}-service
        throttle:
          burstLimit: 200
          rateLimit: 100
    
package:
  individually: true
  
provider:
  name: aws
  region: ${opt:region, 'ap-southeast-2'}
  stage: ${opt:stage, 'stg'}
  stackName: ${self:custom.stage}-${self:custom.region}-${self:service}-service
  runtime: nodejs16.x
  lambdaHashingVersion: 20201221
  httpApi:
    cors: true
  logs:
    httpApi: true

   
functions:
  send-sms:
    handler: functions/send-sms.handler
    timeout: 30
    environment:
      auroraDBUsername: ${self:custom.secrets.auroraDBSecret.username}
      auroraDBPassword: ${self:custom.secrets.auroraDBSecret.password}
      auroraDBHost: ${self:custom.secrets.auroraDBSecret.host}
      auroraDBPort: ${self:custom.secrets.auroraDBSecret.port}
      auroraDBName: ${self:custom.secrets.auroraDBSecret.databaseName}
    events:
      - http:
          method: POST
          path: v1/sms/send
          private: true
          cors: true
      - sqs:
          arn:
            Fn::GetAtt:
              - SMSQueue
              - Arn
          batchSize: 1
    vpc:
      securityGroupIds: ${self:custom.settings.${self:custom.stage}.securityGroupIds}
      subnetIds: ${self:custom.settings.${self:custom.stage}.subnetIds}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sns:SetSMSAttributes
          - sns:Publish
        Resource: '*'

  bulk-sms-send:
    handler: functions/bulk/send-sms.handler
    timeout: 30
    environment:
      notificationTopicArn: ${self:custom.names.notificationTopicArn}
    events:
      - http:
          method: POST
          path: v1/bulk/sms/send
          private: true
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sns:Publish
        Resource: 
          - ${self:custom.names.notificationTopicArn}
          
  error-notify:
    handler: functions/error-notify.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - NotificationSNSTopicDLQ
              - Arn
          batchSize: 1
      - sqs:
          arn:
            Fn::GetAtt:
              - SMSDLQ
              - Arn
          batchSize: 1

resources: ${file(serverless/resources.yml)}
    