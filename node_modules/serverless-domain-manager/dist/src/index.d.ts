import APIGatewayWrapper = require("./aws/api-gateway-wrapper");
import CloudFormationWrapper = require("./aws/cloud-formation-wrapper");
import S3Wrapper = require("./aws/s3-wrapper");
import DomainConfig = require("./domain-config");
import { ServerlessInstance, ServerlessOptions, ServerlessUtils } from "./types";
declare class ServerlessCustomDomain {
    apiGatewayWrapper: APIGatewayWrapper;
    cloudFormationWrapper: CloudFormationWrapper;
    s3Wrapper: S3Wrapper;
    serverless: ServerlessInstance;
    options: ServerlessOptions;
    commands: object;
    hooks: object;
    domains: DomainConfig[];
    constructor(serverless: ServerlessInstance, options: ServerlessOptions, v3Utils?: ServerlessUtils);
    /**
     * Wrapper for lifecycle function, initializes variables and checks if enabled.
     * @param lifecycleFunc lifecycle function that actually does desired action
     */
    hookWrapper(lifecycleFunc: any): Promise<any>;
    /**
     * Validate if the plugin config exists
     */
    validateConfigExists(): void;
    /**
     * Goes through custom domain property and initializes local variables and cloudformation template
     */
    initializeVariables(): void;
    /**
     * Validates domain configs to make sure they are valid, ie HTTP api cannot be used with EDGE domain
     */
    validateDomainConfigs(): void;
    /**
     * Setup AWS resources
     */
    initAWSResources(): void;
    /**
     * Lifecycle function to create a domain
     * Wraps creating a domain and resource record set
     */
    createDomains(): Promise<void>;
    /**
     * Lifecycle function to create a domain
     * Wraps creating a domain and resource record set
     */
    createDomain(domain: DomainConfig): Promise<void>;
    /**
     * Lifecycle function to delete a domain
     * Wraps deleting a domain and resource record set
     */
    deleteDomains(): Promise<void>;
    /**
     * Wraps deleting a domain and resource record set
     */
    deleteDomain(domain: DomainConfig): Promise<void>;
    /**
     * Lifecycle function to createDomain before deploy and add domain info to the CloudFormation stack's Outputs
     */
    createOrGetDomainForCfOutputs(): Promise<void>;
    /**
     * Lifecycle function to create basepath mapping
     * Wraps creation of basepath mapping and adds domain name info as output to cloudformation stack
     */
    setupBasePathMappings(): Promise<void>;
    /**
     * Lifecycle function to delete basepath mapping
     * Wraps deletion of basepath mapping
     */
    removeBasePathMappings(): Promise<void>;
    /**
     * Lifecycle function to print domain summary
     * Wraps printing of all domain manager related info
     */
    domainSummaries(): Promise<void>;
    /**
     * Gets rest API id from existing config or CloudFormation stack
     */
    getApiId(domain: DomainConfig): Promise<string>;
    /**
     *  Adds the domain name and distribution domain name to the CloudFormation outputs
     */
    addOutputs(domain: DomainConfig): void;
}
export = ServerlessCustomDomain;
